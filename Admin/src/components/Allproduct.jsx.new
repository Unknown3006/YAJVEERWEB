import "../CSS/Allproduct.css";
import { useSelector } from "react-redux";
import { FiTrash2, FiMenu } from "react-icons/fi";
import { useState, useEffect, useRef, useCallback } from "react";

export default function Allproduct() {
  const { data: products } = useSelector((state) => state.cart);
  const [currentSlides, setCurrentSlides] = useState({});
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isSidebarHidden, setIsSidebarHidden] = useState(false);
  const intervalsRef = useRef({});

  const toggleSidebar = () => {
    setIsSidebarHidden(!isSidebarHidden);
    document.body.classList.toggle('sidebar-hidden');
  };

  useEffect(() => {
    if (!products?.length) return;

    setCurrentSlides(prev => {
      const newSlides = { ...prev };
      products.forEach((product) => {
        if (!newSlides[product._id]) {
          newSlides[product._id] = 0;
        }
      });
      return newSlides;
    });
  }, [products]);

  const setupIntervals = useCallback(() => {
    if (!products?.length) return;

    Object.values(intervalsRef.current).forEach(interval => {
      if (interval) clearInterval(interval);
    });
    intervalsRef.current = {};

    products.forEach((product) => {
      if (product._id && product.photos.length > 1) {
        intervalsRef.current[product._id] = setInterval(() => {
          setCurrentSlides(prev => ({
            ...prev,
            [product._id]: (prev[product._id] + 1) % product.photos.length
          }));
        }, 3000);
      }
    });
  }, [products]);

  useEffect(() => {
    setupIntervals();

    return () => {
      Object.values(intervalsRef.current).forEach(interval => {
        if (interval) clearInterval(interval);
      });
      intervalsRef.current = {};
    };
  }, [setupIntervals]);

  const calculateDiscountedPrice = (actualPrice, discount) => {
    return Math.round(actualPrice - (actualPrice * discount) / 100);
  };

  const handleDetailsClick = (product) => {
    setSelectedProduct(product);
  };

  const handleCloseDetails = () => {
    setSelectedProduct(null);
  };

  if (!products?.length) {
    return (
      <>
        <button 
          className="sidebar-toggle" 
          onClick={toggleSidebar} 
          aria-label="Toggle Sidebar"
        >
          <FiMenu />
        </button>
        <div className="all-products-container">
          <h1>All Products</h1>
          <p className="no-products">No products available</p>
        </div>
      </>
    );
  }

  return (
    <>
      <button 
        className="sidebar-toggle" 
        onClick={toggleSidebar} 
        aria-label="Toggle Sidebar"
      >
        <FiMenu />
      </button>
      <div className={`all-products-container ${isSidebarHidden ? 'sidebar-hidden' : ''}`}>
        <h1>All Products</h1>
        <div className="products-grid">
          {products?.map((product) => (
            <div key={product._id} className="Menucard">
              <div className="menui">
                <img
                  src={product.photos[0]}
                  alt={product.productName}
                  className="ig"
                />
              </div>
              <div className="pname">
                <p>{product.productName}</p>
              </div>
              <div className="pprice">
                <p className="dis">{product.discount}% OFF</p>
                <p className="dsp">₹{product.actualPrice}</p>
                <p className="acp">₹{calculateDiscountedPrice(product.actualPrice, product.discount)}</p>
              </div>
              <div className="menucart" onClick={() => handleDetailsClick(product)}>
                <p>Details</p>
              </div>
            </div>
          ))}
        </div>
        
        {selectedProduct && (
          <div className={`product-detail ${isSidebarHidden ? 'sidebar-hidden' : ''}`}>
            <div className="product-info">
              <button className="close-btn" onClick={handleCloseDetails}>×</button>
              <button className="delete-btn">
                <FiTrash2 />
              </button>

              <div className="slider-container">
                {selectedProduct.photos?.map((photo, photoIndex) => (
                  <img
                    key={photoIndex}
                    src={photo}
                    alt={`${selectedProduct.productName} - ${photoIndex + 1}`}
                    className={photoIndex === currentSlides[selectedProduct._id] ? 'active' : ''}
                  />
                ))}
                <div className="slider-dots">
                  {selectedProduct.photos?.map((_, photoIndex) => (
                    <span
                      key={photoIndex}
                      className={`dot ${photoIndex === currentSlides[selectedProduct._id] ? 'active' : ''}`}
                    />
                  ))}
                </div>
              </div>
              <h3 className="product-name">{selectedProduct.productName}</h3>
              <div className="price-info">
                <div className="prices">
                  <span className="actual-price">₹{selectedProduct.actualPrice}</span>
                  {selectedProduct.discount > 0 && (
                    <span className="discounted-price">
                      ₹{calculateDiscountedPrice(selectedProduct.actualPrice, selectedProduct.discount)}
                    </span>
                  )}
                </div>
                {selectedProduct.discount > 0 && (
                  <span className="discount-badge">{selectedProduct.discount}% OFF</span>
                )}
              </div>
              <div className="packaging-type">
                Type: <span>{selectedProduct.type}</span>
              </div>
              <p className="product-description-full">{selectedProduct.description}</p>

              <div className="product-lists">
                <div className="ingredients">
                  <h4>Ingredients</h4>
                  <ul>
                    {JSON.parse(selectedProduct.ingredients).map((ingredient, i) => (
                      <li key={i}>{ingredient}</li>
                    ))}
                  </ul>
                </div>

                <div className="benefits">
                  <h4>Benefits</h4>
                  <ul>
                    {JSON.parse(selectedProduct.benefits).map((benefit, i) => (
                      <li key={i}>{benefit}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
